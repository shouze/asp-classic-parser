name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: 
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-x86
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
        - build: linux-aarch64
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: stable-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        # Install cross
        cargo install cross --locked

        # Set cross as the cargo command
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV

    - name: Set target flags
      if: matrix.target != ''
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show build configuration
      shell: bash
      run: |
        echo "cargo command: ${{ env.CARGO }}"
        echo "target flags: ${{ env.TARGET_FLAGS }}"
        echo "target dir: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      shell: bash
      run: |
        ${{ env.CARGO }} build --release ${{ env.TARGET_FLAGS }}

    - name: Determine binary path and archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/asp-classic-parser.exe"
          echo "ARCHIVE=asp-classic-parser-$version-${{ matrix.target }}.zip" >> $GITHUB_ENV
        else
          bin="target/${{ matrix.target }}/release/asp-classic-parser"
          echo "ARCHIVE=asp-classic-parser-$version-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
        fi
        
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN"

    - name: Strip release binary (Linux)
      if: matrix.os == 'ubuntu-latest' && env.CARGO != 'cross'
      shell: bash
      run: strip "$BIN"

    - name: Create archive directory
      shell: bash
      run: |
        mkdir -p dist
        cp "$BIN" dist/
        cp {README.md,CHANGELOG.md,LICENSE} dist/ || true

    - name: Create zip archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cd dist
        7z a "../$ARCHIVE" *
        cd ..
        certutil -hashfile "$ARCHIVE" SHA256 > "$ARCHIVE.sha256"

    - name: Create tar archive (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        tar -czf "$ARCHIVE" -C dist .
        shasum -a 256 "$ARCHIVE" > "$ARCHIVE.sha256"

    - name: Upload release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" "$ARCHIVE" "$ARCHIVE.sha256"